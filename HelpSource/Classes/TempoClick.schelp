TITLE:: TempoClick
summary:: Impulse source synced with language-side clock
categories:: Control
related:: Classes/Impulse

DESCRIPTION::
Allocates a control bus on the server, and plays regular impulses on it.

It plays one new synth every beat, with teletype::subdiv:: pulses in each beat. This maintains precise sync with the language-side clock. (The server's sample rate fluctuates according to the audio interface. If you simply run one synth for several minutes, the deviation in sample rate will cause the server-side pulses to drift out of sync with the clock. TempoClick refreshes the sync every beat.)


CLASSMETHODS::

METHOD:: new
Creates a new instance, and launches the impulses on the next clock beat.

ARGUMENT:: server
(The server that will host the control bus.

ARGUMENT:: clock
An instance of link::Classes/TempoClock:: to sync with.

ARGUMENT:: bus
Optional. If you wish to specify a control bus, do it here. If this is teletype::nil::, a control bus will be allocated for you.

ARGUMENT:: subdiv
How many pulses per beat.

returns:: The TempoClick instance.

METHOD:: latencyFudge
Deprecated. No longer used.


INSTANCEMETHODS::

subsection:: Control

METHOD:: play
    Start the pulses on the bus. This is done automatically by link::#*new::.
    
METHOD:: stop
    Stop the pulses, but keep the bus.
    
METHOD:: free
    Stop the pulses and release the bus.

METHOD:: remove
    Synonym for link::#-free::.

subsection:: Bus access

METHOD:: bus
    returns:: The control Bus object.
    
METHOD:: index
    returns:: The control bus's numeric index (integer).
    
METHOD:: asMap
    returns:: A bus-mapping Symbol, compatible with link::Classes/Bus#-asMap::.
    
METHOD:: asMapArg
    Synonym for link::#-asMap::.

METHOD:: asControlInput
    Called automatically if you use a TempoClick in a Synth argument list, e.g. code::Synth(\triggered, [t_trig: aTempoClick])::. See the example below.
    
    returns:: A bus-mapping Symbol, same as link::#-asMap::.
    
METHOD:: asUGenInput
    An link::Classes/In:: UGen, providing the triggers as a server-side signal. If teletype::c:: is the TempoClick instance, you can write e.g. code::Decay2.kr(c, 0.01, 0.1):: to hardcode the clicks into your SynthDef. (Note, however, that it's better practice to provide a trigger input to the SynthDef, and map the control bus as demonstrated in the example.)
    
    returns:: code::In.kr(bus, 1)::.
    
Subsection:: Queries

METHOD:: server
    returns:: The Server hosting the impulses.
    
METHOD:: clock
    returns:: The clock used for sync.
    NOTE:: A teletype::clock_:: method is defined, so it looks like you might be able to change the clock on the fly. teletype::clock_:: comes from link::Classes/Object::. It has no function for TempoClick. The only way to switch to a different clock is to create a new TempoClick instance.::
    
METHOD:: subdiv
    Gets or sets the subdivision (number of pulses per beat).
    
    ARGUMENT:: s
    Number of pulses per beat (integer or float).
        
METHOD:: tempo
    For convenience, you can get or set the clock's tempo here. These methods are forwarded to the clock.
    
    ARGUMENT:: tempo
    Beats per second, as in link::Classes/TempoClock::.
    
METHOD:: nodeID
    There is no particular need to do this, but you can find out which nodeID is playing the impulses at any moment. The synth refreshes once per beat. To avoid using up too many node IDs, TempoClick bounces between two adjacent IDs.
    
    returns:: The current node ID (changes once per beat).

PRIVATE:: init, update, startAliveThread    


EXAMPLES::

code::
s.boot;

b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");
c = TempoClick(s, TempoClock.default, subdiv: 8);

(
a = { |t_trig = 0, bufnum|
	var	tProb = TRand.kr(0.0, 1.0, t_trig) < 0.6,  // like 0.6.coin
		trig = t_trig * tProb,
		bufFr = BufFrames.ir(bufnum),
		start = TRand.kr(0, bufFr - (0.125 * BufSampleRate.ir(bufnum)), trig),
		pos = Phasor.ar(trig, 1, start, 1e26, start),
		sig = BufRd.ar(1, bufnum, pos, loop: 0),
		decay = Decay2.kr(trig, 0.01, 0.1);
	(sig * decay) ! 2
}.play(args: [t_trig: c, bufnum: b]);
)

// TempoClick uses server.latency, just like patterns by default
// so this Pbind will stay in sync with the synth

(
p = Pbind(
	\degree, Pstutter(Pwhite(1, 4, inf), Pwhite(-2, 9, inf)) - #[0, 2, 4],
	\dur, Pwrand([Pseq(#[0.125, 0.375], 1), 0.25, 0.5, 0.75], #[1, 4, 3, 1].normalizeSum, inf),
	\sustain, max(0.12, Pkey(\dur) * Pwrand(#[0.2, 0.4, 0.8], #[0.6, 0.3, 0.1], inf)),
	\amp, Pexprand(0.02, 0.1, inf)
).play;
)

p.stop;
a.free;
c.free;
b.free;
::